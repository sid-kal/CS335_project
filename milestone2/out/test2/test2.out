
BankAccount.__init__:
	beginfunc 0
	t0 = self
	t1 = t0
	t1 = 0 + t1
	t2 = account_number
	*(t1) = t2
	t3 = self
	t4 = t3
	t4 = 8 + t4
	t5 = balance
	*(t4) = t5
	leave  
	endfunc 


BankAccount.deposit:
	beginfunc 0
	t6 = self
	t7 = t6
	t7 = 8 + t7
	t8 = *(t7)
	t9 = amount
	t10 = t8 + t9
	*(t7) = t10
	t11 = "f"Deposited ${amount}. New balance: ${self.balance}""
	save registers  
	param t11 
	stackpointer -8 
	call print_str 1
	stackpointer +8 
	restore registers  
	leave  
	endfunc 


BankAccount.withdraw:
	beginfunc 0
	t12 = self
	t13 = t12
	t13 = 8 + t13
	t14 = *(t13)
	t15 = amount
	t14 = t14 >= t15
	ifFalse t14 jump L0
	t16 = self
	t17 = t16
	t17 = 8 + t17
	t18 = *(t17)
	t19 = amount
	t20 = t18 - t19
	*(t17) = t20
	t21 = "f"Withdrew ${amount}. New balance: ${self.balance}""
	save registers  
	param t21 
	stackpointer -8 
	call print_str 1
	stackpointer +8 
	restore registers  
	jump L1

L0:
	t22 = "Insufficient funds!"
	save registers  
	param t22 
	stackpointer -8 
	call print_str 1
	stackpointer +8 
	restore registers  

L1:
	leave  
	endfunc 


BankAccount.display:
	beginfunc 0
	t23 = "f"Account Number: {self.account_number}, Balance: ${self.balance}""
	save registers  
	param t23 
	stackpointer -8 
	call print_str 1
	stackpointer +8 
	restore registers  
	leave  
	endfunc 


SavingsAccount.__init__:
	beginfunc 0
	t24 = self
	t25 = t24
	t25 = 0 + t25
	t26 = account_number
	*(t25) = t26
	t27 = self
	t28 = t27
	t28 = 8 + t28
	t29 = balance
	*(t28) = t29
	t30 = self
	t31 = t30
	t31 = 16 + t31
	t32 = interest_rate
	*(t31) = t32
	leave  
	endfunc 


SavingsAccount.add_interest:
	beginfunc 8
	t33 = self
	t34 = t33
	t34 = 8 + t34
	t35 = *(t34)
	t36 = self
	t37 = t36
	t37 = 16 + t37
	t38 = *(t37)
	t39 = 100
	cvt_int_to_float t39
	t38 = t38 / t39
	t35 = t35 * t38
	interest_amount = t35
	t40 = self
	t41 = t40
	t41 = 8 + t41
	t42 = *(t41)
	t43 = interest_amount
	t44 = t42 + t43
	*(t41) = t44
	t45 = "f"Interest added: ${interest_amount}. New balance: ${self.balance}""
	save registers  
	param t45 
	stackpointer -8 
	call print_str 1
	stackpointer +8 
	restore registers  
	leave  
	endfunc 


CheckingAccount.__init__:
	beginfunc 0
	t46 = self
	t47 = t46
	t47 = 0 + t47
	t48 = account_number
	*(t47) = t48
	t49 = self
	t50 = t49
	t50 = 8 + t50
	t51 = balance
	*(t50) = t51
	t52 = self
	t53 = t52
	t53 = 16 + t53
	t54 = overdraft_limit
	*(t53) = t54
	leave  
	endfunc 


CheckingAccount.withdraw:
	beginfunc 0
	t55 = self
	t56 = t55
	t56 = 8 + t56
	t57 = *(t56)
	t58 = self
	t59 = t58
	t59 = 16 + t59
	t60 = *(t59)
	t57 = t57 + t60
	t61 = amount
	t57 = t57 >= t61
	ifFalse t57 jump L2
	t62 = self
	t63 = t62
	t63 = 8 + t63
	t64 = *(t63)
	t65 = amount
	t66 = t64 - t65
	*(t63) = t66
	t67 = "f"Withdrew ${amount}. New balance: ${self.balance}""
	save registers  
	param t67 
	stackpointer -8 
	call print_str 1
	stackpointer +8 
	restore registers  
	jump L3

L2:
	t68 = "Transaction declined! Overdraft limit exceeded."
	save registers  
	param t68 
	stackpointer -8 
	call print_str 1
	stackpointer +8 
	restore registers  

L3:
	leave  
	endfunc 


main:
	beginfunc 16
	t69 = "SA001"
	t70 = 1000
	t71 = 2.5
	t72 = 24
	save registers  
	param t72 
	stackpointer -16 
	call allocmem 1
	t72 = return_value
	stackpointer +16 
	restore registers  
	save registers  
	param t71 
	param t70 
	param t69 
	param t72 
	stackpointer -32 
	call SavingsAccount.__init__ 4
	stackpointer +32 
	restore registers  
	savings_acc = t72
	t73 = savings_acc
	t74 = 500
	save registers  
	param t74 
	param t73 
	stackpointer -16 
	call BankAccount.deposit 2
	stackpointer +16 
	restore registers  
	t75 = savings_acc
	save registers  
	param t75 
	stackpointer -8 
	call SavingsAccount.add_interest 1
	stackpointer +8 
	restore registers  
	t76 = savings_acc
	t77 = 200
	save registers  
	param t77 
	param t76 
	stackpointer -16 
	call BankAccount.withdraw 2
	stackpointer +16 
	restore registers  
	t78 = savings_acc
	save registers  
	param t78 
	stackpointer -8 
	call BankAccount.display 1
	stackpointer +8 
	restore registers  
	t79 = "--------------------------------"
	save registers  
	param t79 
	stackpointer -8 
	call print_str 1
	stackpointer +8 
	restore registers  
	t80 = "CA001"
	t81 = 2000
	t82 = 500
	t83 = 24
	save registers  
	param t83 
	stackpointer -16 
	call allocmem 1
	t83 = return_value
	stackpointer +16 
	restore registers  
	save registers  
	cvt_int_to_float t82
	param t82 
	param t81 
	param t80 
	param t83 
	stackpointer -32 
	call CheckingAccount.__init__ 4
	stackpointer +32 
	restore registers  
	checking_acc = t83
	t84 = checking_acc
	t85 = 1000
	save registers  
	param t85 
	param t84 
	stackpointer -16 
	call BankAccount.deposit 2
	stackpointer +16 
	restore registers  
	t86 = checking_acc
	t87 = 3000
	save registers  
	param t87 
	param t86 
	stackpointer -16 
	call CheckingAccount.withdraw 2
	stackpointer +16 
	restore registers  
	t88 = checking_acc
	t89 = 500
	save registers  
	param t89 
	param t88 
	stackpointer -16 
	call CheckingAccount.withdraw 2
	stackpointer +16 
	restore registers  
	t90 = checking_acc
	save registers  
	param t90 
	stackpointer -8 
	call BankAccount.display 1
	stackpointer +8 
	restore registers  
	leave  
	endfunc 


programstart:
	call main 0
